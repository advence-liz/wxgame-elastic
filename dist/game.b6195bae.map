{"version":3,"sources":["src/base/matter.js","src/base/Resource.js","src/base/ResourceLoader.js","src/base/DataStore.js","src/base/Sprite.js","src/sprite/BackGround.js","src/sprite/StartButton.js","src/sprite/Score.js","src/base/Body.js","src/body/Block.js","src/body/Border.js","src/body/Bridge.js","src/body/Aim.js","src/Director.js","App.js","game.js"],"names":["f","exports","module","define","amd","window","global","self","Matter","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","create","options","defaults","nextId","fromPath","x","y","angle","body","extend","nextGroup","isNonColliding","nextCategory","_initProperties","set","bounds","vertices","positionPrev","clone","position","anglePrev","parts","isStatic","isSleeping","parent","rotate","axes","update","velocity","area","mass","inertia","defaultFillStyle","choose","render","fillStyle","strokeStyle","sprite","xOffset","min","max","yOffset","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","restitution","friction","density","inverseMass","inverseInertia","Infinity","angularVelocity","speed","angularSpeed","motion","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","timeScale","correction","deltaTimeSquared","pow","frictionAir","velocityPrevX","velocityPrevY","force","torque","applyForce","offset","properties","mult","div","Composite","Events","setModified","composite","isModified","updateParents","updateChildren","composites","childComposite","object","objects","trigger","obj","type","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","bodies","removeBodyAt","constraints","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","id","toString","move","rebase","recursive","World","Contact","vertex","index","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","collisionFilter","overlaps","j","partA","k","partB","pairId","previousCollision","pair","isActive","collision","collides","collided","filterA","filterB","group","mask","category","Grid","grid","forceUpdate","col","row","bucket","bucketId","world","buckets","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","pairsList","_createActivePairsList","regionA","regionB","_createRegion","floor","bucketWidth","bucketHeight","column","pairKeys","keys","timestamp","parentA","parentB","isSensor","frictionStatic","slop","contacts","supports","activeContacts","support","contactId","contact","separation","depth","setActive","timeUpdated","Pairs","_pairMaxIdleLife","list","collisionStart","collisionEnd","collisionActive","activePairIds","removeOld","pairIndex","indexesToRemove","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","totalContacts","solvePosition","normal","bodyBtoA","contactShare","positionImpulse","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","normalImpulse","tangentImpulse","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","nearestDistance","distance","vertexA","vertexB","vertexToBody","bodyAPosition","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","label","stiffness","damping","angularStiffness","angleA","angleB","plugin","anchors","preSolveAll","constraintImpulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","resistanceTotal","zero","postSolveAll","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","parseInt","replace","charAt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","Engine","Render","renderDefaults","controller","broadphase","metrics","extended","timing","event","enableSleeping","_bodiesApplyGravity","gravity","_bodiesUpdate","constraintIterations","detector","afterCollisions","positionIterations","velocityIterations","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","eventNames","callback","names","name","events","off","join","callbacks","newCallbacks","eventClone","Plugin","version","uses","used","use","before","after","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","_getRelativeMousePosition","changedTouches","preventDefault","mousewheel","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","width","clientHeight","height","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","rangeParsed","rangeParts","versionParsed","versionParts","operator","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","runner","fps","deltaMin","deltaMax","run","time","frameRequestId","enabled","tick","isFixed","timePrev","deltaHistory","deltaSampleSize","timeScalePrev","frameCounter","counterTimestamp","stop","start","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepThreshold","sleepCounter","sleepingBody","movingBody","wasSleeping","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","roof","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","normalise","gradient","boundsA","boundsB","vector","shift","deltaX","deltaY","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","RenderPixi","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","hasBounds","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","background","wireframes","wireframeBackground","currentBackground","_applyBackground","globalCompositeOperation","fillRect","showSleeping","showConvexHulls","bodyConvexHulls","bodyWireframes","showBounds","bodyBounds","showAxes","showAngleIndicator","bodyAxes","showPositions","bodyPositions","showVelocity","bodyVelocity","showIds","bodyIds","showSeparations","separations","showCollisions","showVertexNumbers","vertexNumbers","showMousePosition","mousePosition","showBroadphase","showDebug","debug","debugTimestamp","text","round","debugString","font","fillText","visible","beginPath","arc","closePath","moveTo","coils","lineTo","lineWidth","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","showInternalEdges","globalAlpha","opacity","texture","_getTexture","drawImage","xScale","yScale","fontsize","fontfamily","family","color","maxWidth","content","textBaseline","textAlign","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","transparent","pixiOptions","renderer","PIXI","WebGLRenderer","container","Container","spriteContainer","view","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","backgroundColor","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","Resources","ResourceLoader","imageCount","audioCount","Map","res","Audio","cb","loadCount","onload","DataStore","isGameOver","scoreCount","instance","ctx","img","w","h","srcX","srcY","srcW","srcH","getInstance","BackGround","physics","getImage","StartButton","Score","dataStore","Block","blockCount","blockMap","blockHPMax","lastBlockPositionX","blockArr","hp","block","increase","draw","Border","borderBottom","bottomHeight","leftWidth","borderLeft","borderRight","Bridge","bridge","Aim","ballRadius","baseBallX","baseBallY","balls","ballAppends","ballCount","ballAppendCount","isRending","isForce","inervalMax","drawBall","drawAim","ball","intervalCount","interval","setInterval","ballAppend","isBall","fixRate","eventHandler","play","clientX","clientY","offsetX","offsetY","Director","isReload","animationHandle","spriteDirect","upMove","App","director","spriteLoad","registerEvent","physicsDirect","autoplay","reload","wx","getElementById","createCanvas","createImage","createInnerAudioContext"],"mappings":"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","file":"game.b6195bae.map","sourceRoot":"..","sourcesContent":["/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n\n                // 增加自定义渲染TEXT\n                if (part.render.text) {\n                  // 30px is default font size\n                  var fontsize = 30;\n                  // arial is default font family\n                  var fontfamily = part.render.text.family || \"Arial\";\n                  // white text color by default\n                  var color = part.render.text.color || \"#FFFFFF\";\n                  // text maxWidth\n                  var maxWidth = part.render.text.maxWidth\n\n                  if (part.render.text.size)\n                    fontsize = part.render.text.size;\n                  else if (part.circleRadius)\n                    fontsize = part.circleRadius / 2;\n\n                  var content = \"\";\n                  if (typeof part.render.text == \"string\")\n                    content = part.render.text;\n                  else if (part.render.text.content)\n                    content = part.render.text.content;\n\n                  c.textBaseline = \"middle\";\n                  c.textAlign = \"center\";\n                  c.fillStyle = color;\n                  c.font = fontsize + 'px ' + fontfamily;\n                  if (part.bounds){\n                    maxWidth = part.bounds.max.x - part.bounds.min.x;\n                  }\n                  c.fillText(content, part.position.x, part.position.y, maxWidth);\n                }\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"auto\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","export const Resources = [\n    ['background', 'res/background.png'],\n    ['startButton', 'res/startbutton.png'],\n    ['bgm', 'res/xuemaojiao.mp3'],\n    ['launch', 'res/launch.mp3']\n]","//资源文件加载器，确保在图片资源加载完成后才渲染\nimport { Resources } from './Resource.js'\n\nexport class ResourceLoader {\n  constructor() {\n    this.imageCount = 0\n    this.audioCount = 0\n    //导入资源\n    this.map = new Map(Resources)\n    for (let [key, src] of this.map) {\n      let res = null\n      if (src.split('.')[1] == 'png' || src.split('.')[1] == 'jpg') {\n        this.imageCount++\n        // H5创建image的API\n        res = new Image()\n        // 微信创建image的API\n        // res = wx.createImage()\n        res.src = src\n      } else {\n        this.audioCount++\n        // H5创建audio的API\n        res = new Audio()\n        // 微信创建audio的API\n        // res = wx.createInnerAudioContext()\n        res.src = src\n      }\n      this.map.set(key, res)\n    }\n  }\n\n  // 加载完成回调\n  onload(cb) {\n    let loadCount = 0\n    for (let res of this.map.values()) {\n      // 使this指向当前的ResourceLoader\n      res.onload = () => {\n        loadCount++\n        if (loadCount >= this.imageCount) {\n          cb(this.map)\n        }\n      }\n    }\n  }\n}","// 数据管理\nexport class DataStore {\n  // 单例\n  static getInstance() {\n    if (!DataStore.instance) {\n      DataStore.instance = new DataStore()\n    }\n    return DataStore.instance\n  }\n  // 构造存储容器\n  constructor() {\n    this.map = new Map()\n    this.res = null         // 游戏资源\n    this.isGameOver = false // 游戏进度标识\n    this.scoreCount = 0     // 游戏分数\n  }\n  // 存入\n  put(key, value) {\n    // 如果传入的参数是函数，则new function\n    if (typeof value === 'function') {\n      value = new value()\n    }\n    this.map.set(key, value)\n    // 可链式使用\n    return this\n  }\n  // 取出\n  get(key) {\n    return this.map.get(key)\n  }\n  //销毁\n  destroy() {\n    for (let value of this.map.values()) {\n      value = null\n    }\n  }\n}","import { DataStore } from './DataStore.js'\nexport class Sprite {\n  constructor(ctx, img, x = 0, y = 0, w = 0, h = 0, srcX = 0, srcY = 0, srcW = 0, srcH = 0, ) {\n    this.ctx = ctx\n    this.img = img\n    this.srcX = srcX\n    this.srcY = srcY\n    this.srcW = srcW\n    this.srcH = srcH\n    this.x = x\n    this.y = y\n    this.w = w\n    this.h = h\n  }\n\n  /**\n   * 绘制图片\n   * img 传入Image对象\n   * srcX 要剪裁的起始X坐标\n   * srcY 要剪裁的起始Y坐标\n   * srcW 剪裁的宽度\n   * srcH 剪裁的高度\n   * x 放置的x坐标\n   * y 放置的y坐标\n   * w 要使用的宽度\n   * h 要使用的高度\n   */\n  draw(img = this.img,\n    x = this.x, y = this.y, w = this.w, h = this.h,\n    srcX = this.srcX, srcY = this.srcY, srcW = this.srcW, srcH = this.srcH) {\n    this.ctx.drawImage(img, srcX, srcY, srcW, srcH, x, y, w, h)\n  }\n\n  static getImage(key) {\n    return DataStore.getInstance().res.get(key)\n  }\n}","import { Sprite } from '../base/Sprite.js'\n/**\n * 背景类\n */\nexport class BackGround extends Sprite {\n  constructor(physics) {\n    const image = Sprite.getImage('background')\n    super(\n      physics.ctx, image,\n      (physics.canvas.width - image.width) / 2,\n      (physics.canvas.height - image.height) / 2.5,\n      image.width, image.height,\n      0,\n      0,\n      image.width, image.height\n    )\n  }\n}","import { Sprite } from '../base/Sprite.js'\n/**\n * 开始按钮类\n */\nexport class StartButton extends Sprite {\n  constructor(physics) {\n    const image = Sprite.getImage('startButton')\n    super(\n      physics.ctx, image,\n      (physics.canvas.width - image.width) / 2,\n      (physics.canvas.height - image.height) / 2.5,\n      image.width, image.height,\n      0,\n      0,\n      image.width, image.height\n    )\n  }\n}","import { DataStore } from '../base/DataStore.js'\n/**\n * 计分器类\n */\nexport class Score {\n  constructor(physics) {\n    this.ctx = physics.ctx\n    // 数据管理\n    this.dataStore = DataStore.getInstance()\n    this.dataStore.scoreCount = 0\n  }\n\n  // 绘制\n  draw() {\n    this.ctx.font = '25px Arial'\n    this.ctx.fillStyle = '#464444'\n    this.ctx.fillText(`分数 ${this.dataStore.scoreCount}`, 50, 20)\n  }\n  // 加分\n  static increase() {\n    DataStore.getInstance().scoreCount += 1\n  }\n}","// 物体基类\nexport class Body {\n  constructor(physics) {\n    this.physics = physics\n  }\n}","import { Body } from '../base/Body.js'\nimport { Score } from '../sprite/Score.js'\nimport { DataStore } from '../base/DataStore.js'\n/**\n * 方块\n */\nexport class Block extends Body {\n  constructor(physics) {\n    super(physics)\n    this.blockCount = 5\n    this.blockMap = {}\n    this.blockHPMax = 10\n    this.dataStore = DataStore.getInstance()\n  }\n\n  draw() {\n    let physics = this.physics\n    let lastBlockPositionX = 15\n    let lastBlockPositionY = 20\n    let blockArr = []\n    // 生成随机数量方块\n    for (let i = 0; i < this.blockCount; i++) {\n      let hp = Math.floor(Math.random() * this.blockHPMax) + 1\n      const block = physics.Matter.Bodies.rectangle(\n        lastBlockPositionX + Math.floor(Math.random() * 20) + 15,\n        physics.canvas.height - lastBlockPositionY - Math.floor(Math.random() * 50),\n        30, 30, {\n          isStatic: true,\n          render: {\n            visible: true,\n            text: {\n              content: hp,\n              color: \"white\",\n              size: 16,\n              family: \"Arial\",\n            }\n            // sprite: {\n            //   texture: 'res/ball.png',\n            //   xScale: 0.1,\n            //   yScale: 0.1\n            // }\n          },\n        })\n      block.hp = hp\n      lastBlockPositionX += 50\n      blockArr.push(block)\n      this.blockMap[block.id] = block\n    }\n    // 将方块集合添加进入世界\n    physics.Matter.World.add(physics.engine.world, blockArr)\n    return this\n  }\n\n  // 方块被碰撞\n  event() {\n    let physics = this.physics\n    // 方块被碰撞时事件\n    physics.Matter.Events.on(physics.engine, 'collisionStart', (event) => {\n      var pairs = event.pairs\n      for (let pair of pairs) {\n        // 被碰撞的方块生命减到0时，销毁\n        if (this.blockMap[pair.bodyA.id]) {\n          this.blockMap[pair.bodyA.id].hp--\n          // 恢复重力\n          this.physics.engine.world.gravity.y = 1\n          Score.increase()\n          pair.bodyA.render.text.content = this.blockMap[pair.bodyA.id].hp\n          if (this.blockMap[pair.bodyA.id].hp <= 0) {\n            physics.Matter.World.remove(physics.engine.world, this.blockMap[pair.bodyA.id])\n            delete this.blockMap[pair.bodyA.id]\n            // 所有方块打完判断游戏结束\n            // if (Object.keys(this.blockMap).length == 0) {\n            //   this.dataStore.isGameOver = true\n            // }\n          }\n        }\n        // pair.bodyB.render.fillStyle = '#333'\n      }\n    })\n    return this\n  }\n\n  // 方块向上移动\n  upMove() {\n    let physics = this.physics\n    let i = 0\n    physics.Matter.Events.on(physics.engine, 'beforeUpdate', (event) => {\n      for (let id in this.blockMap) {\n        // body is static so must manually update velocity for friction to work\n        // physics.Body.setVelocity(body, { x: px - this.blockMap[id].position.x, y: 0 })\n        physics.Matter.Body.setPosition(this.blockMap[id], { x: this.blockMap[id].position.x, y: this.blockMap[id].position.y - 0.2 })\n        if (this.blockMap[id].position.y < 30) {\n          this.dataStore.isGameOver = true\n          this.blockMap = {}\n          physics.Matter.Events.off(physics.engine, 'beforeUpdate')\n          break\n        }\n      }\n      // 绘制新一行方块，且方块生命值上条\n      if (i > 0 && i % 1000 == 0) {\n        this.blockHPMax += 10\n        this.draw()\n      }\n      i++\n    })\n  }\n}","// 边界\nimport { Body } from '../base/Body.js'\n\nexport class Border extends Body {\n  constructor(physics) {\n    super(physics)\n  }\n\n  draw() {\n    const physics = this.physics\n    let bottomHeight = 10\n    let leftWidth = 10\n    const borderBottom = physics.Matter.Bodies.rectangle(\n      physics.canvas.width / 2, physics.canvas.height - bottomHeight / 2,\n      physics.canvas.width - leftWidth * 2, bottomHeight, {\n        isStatic: true,\n        render: {\n          visible: true\n        }\n      })\n    const borderLeft = physics.Matter.Bodies.rectangle(\n      leftWidth / 2, physics.canvas.height / 2,\n      leftWidth, physics.canvas.height, {\n        isStatic: true,\n        render: {\n          visible: true\n        }\n      })\n    const borderRight = physics.Matter.Bodies.rectangle(\n      physics.canvas.width - leftWidth / 2, physics.canvas.height / 2,\n      leftWidth, physics.canvas.height, {\n        isStatic: true,\n        render: {\n          visible: true\n        }\n      })\n    physics.Matter.World.add(physics.engine.world, [borderBottom, borderLeft, borderRight])\n  }\n\n}","import { Body } from '../base/Body.js'\n\n/**\n * 桥梁\n */\nexport class Bridge extends Body {\n  constructor(physics) {\n    super(physics)\n  }\n\n  draw() {\n    const physics = this.physics\n    // add bodies\n    var group = physics.Matter.Body.nextGroup(true);\n    // 桥梁主体\n    var bridge = physics.Matter.Composites.stack(160, 290, 12, 1, 0, 0, function (x, y) {\n      return physics.Matter.Bodies.rectangle(x - 20, y, 53, 20, {\n        collisionFilter: { group: group },\n        chamfer: 5,\n        density: 0.005,\n        frictionAir: 0.05,\n        render: {\n          fillStyle: '#575375'\n        }\n      });\n    });\n\n    physics.Matter.Composites.chain(bridge, 0.3, 0, -0.3, 0, {\n      stiffness: 1,\n      length: 0,\n      render: {\n        visible: false\n      }\n    });\n\n    // var stack = physics.Matter.Composites.stack(250, 50, 6, 3, 0, 0, function (x, y) {\n    //   return physics.Matter.Bodies.rectangle(x, y, 50, 50, physics.Matter.Common.random(20, 40));\n    // });\n\n    physics.Matter.World.add(physics.engine.world, [\n      bridge,\n      // stack,\n      // physics.Matter.Bodies.rectangle(30, 490, 220, 380, {\n      //   isStatic: true,\n      //   chamfer: { radius: 20 }\n      // }),\n      // physics.Matter.Bodies.rectangle(770, 490, 220, 380, {\n      //   isStatic: true,\n      //   chamfer: { radius: 20 }\n      // }),\n      physics.Matter.Constraint.create({\n        pointA: { x: 0, y: 400 },\n        bodyB: bridge.bodies[0],\n        pointB: { x: -25, y: 0 },\n        length: 2,\n        stiffness: 0.9\n      }),\n      physics.Matter.Constraint.create({\n        pointA: { x: this.physics.canvas.width, y: 400 },\n        bodyB: bridge.bodies[bridge.bodies.length - 1],\n        pointB: { x: 25, y: 0 },\n        length: 2,\n        stiffness: 0.9\n      })\n    ]);\n  }\n}","// 瞄准类\nimport { Body } from '../base/Body.js'\nimport { DataStore } from '../base/DataStore.js'\n\nexport class Aim extends Body {\n  constructor(physics) {\n    super(physics)\n    this.dataStore = DataStore.getInstance()\n\n    this.ballRadius = 10\n    this.baseBallX = this.physics.canvas.width / 2\n    this.baseBallY = this.ballRadius * 2\n\n    this.x = physics.canvas.width / 2\n    this.y = physics.canvas.height / 2\n    this.balls = []\n    this.ballAppends = []\n    this.ballCount = 7\n    this.ballAppendCount = 20\n    this.isRending = false\n    this.isForce = false\n    this.inervalMax = 100\n  }\n\n  // 覆写绘制\n  draw() {\n    // if (this.isRending) {\n    //   return\n    // }\n    // 清空场景\n    this.physics.Matter.World.remove(this.physics.engine.world, this.balls)\n    this.balls = []\n    this.physics.Matter.World.remove(this.physics.engine.world, this.ballAppends)\n    this.ballAppends = []\n    // 重绘弹球\n    this.drawBall()\n    // 重绘制瞄准\n    this.drawAim()\n    return this\n  }\n\n  // 绘制瞄准\n  drawAim() {\n    if (this.isRending) {\n      return\n    }\n    for (let i = 0; i < this.ballCount; i++) {\n      const ball = this.physics.Matter.Bodies.circle(\n        this.baseBallX + (this.x - this.baseBallX) * i / (this.ballCount - 1),\n        this.baseBallY + (this.y - this.baseBallY) * i / (this.ballCount - 1),\n        this.ballRadius, {\n          isStatic: true,\n          density: 0.04,\n          friction: 0.01,\n          frictionAir: 0.00001,\n          restitution: 0.9,\n          render: {\n            visible: true,\n            fillStyle: '#F35e66',\n            strokeStyle: 'black'\n          }\n        })\n      this.balls.push(ball)\n    }\n    this.physics.Matter.World.add(this.physics.engine.world, this.balls)\n  }\n\n  drawBall() {\n    if (!this.isForce) {\n      return\n    }\n    // 设定正在绘制弹球\n    this.isRending = true\n    this.ballAppends = []\n    this.intervalCount = 0\n    // 定时弹出球，且设定定时结束条件\n    const interval = setInterval(() => {\n      // 绘制弹球\n      if (this.ballAppends.length < this.ballAppendCount) {\n        const ballAppend = this.physics.Matter.Bodies.circle(\n          this.baseBallX,\n          this.baseBallY,\n          this.ballRadius, {\n            isStatic: false,\n            density: 0.04,\n            friction: 0.01,\n            frictionAir: 0.00001,\n            restitution: 0.9,\n            render: {\n              visible: true,\n              fillStyle: '#F35e66',\n              strokeStyle: 'black'\n            }\n          })\n        ballAppend.isBall = true\n        this.physics.Matter.World.add(this.physics.engine.world, ballAppend)\n        const speed = {\n          x: (this.x - this.baseBallX) / (this.y - this.baseBallY),\n          y: 1\n        }\n        // 修正速度，确保从各个角度射出小球的速度差不多，原理是根据勾股定理计算出每个小球的斜边，以全屏斜边作为比对\n        const fixRate = Math.sqrt(Math.pow(speed.x, 2) + Math.pow(speed.y, 2)) / Math.sqrt(Math.pow(this.physics.canvas.width, 2) + Math.pow(this.physics.canvas.height, 2)) * 1000\n        // 给小球赋予推力\n        this.physics.Matter.Body.applyForce(ballAppend, ballAppend.position, {\n          x: speed.x / fixRate * 0.7,\n          y: speed.y / fixRate * 0.7\n        })\n        this.ballAppends.push(ballAppend)\n      }\n      // 超过60%的球休眠则可以重新发射\n      let bodies = this.physics.Matter.Composite.allBodies(this.physics.engine.world)\n      let sleeping = bodies.filter((body) => body.isSleeping && body.isBall)\n      // let isWorldSleeping = bodies.length === sleeping.length\n      let isWorldSleeping = sleeping.length / this.ballAppends.length > 0.6 || this.intervalCount > this.inervalMax\n      if (isWorldSleeping) {\n        this.isRending = false\n        this.isForce = false\n        this.draw()\n        clearInterval(interval)\n      }\n      this.intervalCount++\n    }, 100)\n  }\n\n  // 事件触发\n  event() {\n    let physics = this.physics\n    // 移动设备触摸事件\n    physics.canvas.addEventListener('touchmove', e => {\n      this.eventHandler(e, { isForce: false })\n    })\n    physics.canvas.addEventListener('touchstart', e => {\n      this.eventHandler(e, { isForce: false })\n    })\n    physics.canvas.addEventListener('touchend', e => {\n      this.eventHandler(e, { isForce: true })\n    })\n    // PC设备鼠标事件\n    physics.canvas.addEventListener('mousemove', e => {\n      this.eventHandler(e, { isForce: false })\n    })\n    physics.canvas.addEventListener('mousedown', e => {\n      this.eventHandler(e, { isForce: false })\n    })\n    physics.canvas.addEventListener('mouseup', e => {\n      this.eventHandler(e, { isForce: true })\n    })\n    return this\n  }\n\n  // 事件处理\n  eventHandler(e, options) {\n    e.preventDefault()\n    this.isForce = options.isForce\n    // 刚触发弹射\n    if (this.isForce && !this.isRending) {\n      // 弹射一瞬间关闭重力\n      this.physics.engine.world.gravity.y = 0\n      this.dataStore.res.get('launch').play()\n    }\n    // 非弹射静止\n    if (!this.isForce && !this.isRending) {\n      // 移动设备触摸事件\n      if (e.touches) {\n        this.x = e.touches[0].clientX\n        this.y = Math.max(50, e.touches[0].clientY)\n      }\n      // PC设备鼠标事件\n      else {\n        this.x = e.offsetX\n        this.y = Math.max(50, e.offsetY)\n      }\n    }\n    // 非动态渲染\n    if (!this.isRending) {\n      this.draw()\n    }\n  }\n}","// 精灵对象\nimport { BackGround } from './sprite/BackGround.js'\nimport { StartButton } from './sprite/StartButton.js'\nimport { Score } from './sprite/Score.js'\n// 物理引擎绘制对象\nimport { Block } from './body/Block.js'\nimport { Border } from './body/Border.js'\nimport { Bridge } from './body/Bridge.js'\nimport { Aim } from './body/Aim.js'\n// 数据管理\nimport { DataStore } from './base/DataStore.js'\n\n/**\n * 导演类，控制游戏的逻辑\n */\nexport class Director {\n  constructor(physics) {\n    this.physics = physics\n    this.dataStore = DataStore.getInstance()\n  }\n  // 加载精灵对象\n  spriteLoad() {\n    this.sprite = new Map()\n    this.sprite['score'] = new Score(this.physics)\n    this.sprite['startButton'] = new StartButton(this.physics)\n    this.sprite['background'] = new BackGround(this.physics)\n  }\n  // 逐帧绘制\n  spriteDirect(isReload) {\n    if(isReload){\n      this.dataStore.scoreCount = 0\n    }\n    // 绘制前先判断是否碰撞\n    // this.check()\n    // 游戏未结束\n    if (!this.dataStore.isGameOver) {\n      // 绘制游戏内容\n      this.sprite['score'].draw()\n      // this.sprite['background'].draw()\n      // 自适应浏览器的帧率,提高性能\n      this.animationHandle = requestAnimationFrame(() => this.spriteDirect())\n    }\n    //  游戏结束\n    else {\n      // 停止物理引擎\n      this.physics.Matter.Engine.clear(this.physics.engine)\n      this.physics.Matter.World.clear(this.physics.engine.world)\n      this.physics.Matter.Render.stop(this.physics.render)\n      // 停止绘制\n      cancelAnimationFrame(this.animationHandle)\n      // 结束界面\n      this.sprite['score'].draw()\n      this.sprite['startButton'].draw()\n    }\n  }\n  // 物理绘制\n  physicsDirect(isReload) {\n    this.physics.Matter.Render.run(this.physics.render)\n    if (!isReload) {\n      new Aim(this.physics).draw().event()\n      // new Bridge(this.physics).draw()\n    }\n    new Block(this.physics).draw().event().upMove()\n    new Border(this.physics).draw()\n  }\n}","import { ResourceLoader } from './src/base/ResourceLoader.js'\nimport { DataStore } from './src/base/DataStore.js'\nimport { Director } from './src/Director.js'\n\n/**\n * 游戏入口\n */\nexport class App {\n  constructor(canvas, options) {\n    this.canvas = canvas                                             // 画布\n    this.physics = { ...options, ctx: this.canvas.getContext('2d') } // 物理引擎\n    this.director = new Director(this.physics)                       // 导演\n    this.dataStore = DataStore.getInstance()\n    // 资源加载\n    new ResourceLoader().onload(res => {\n      // 持久化资源\n      this.dataStore.res = res\n      // 加载精灵\n      this.director.spriteLoad(res)\n      // 运行游戏\n      this.run()\n    })\n  }\n\n  /**\n   * 运行游戏\n   */\n  run() {\n    // 注册事件\n    this.registerEvent()\n    // 物理渲染\n    this.director.physicsDirect()\n    // 精灵渲染\n    this.director.spriteDirect()\n    // 音乐播放\n    this.dataStore.res.get('bgm').autoplay = true\n  }\n\n  /**\n   * 重新加载游戏\n   */\n  reload() {\n    // 物理渲染\n    this.director.physicsDirect(true)\n    // 精灵渲染\n    this.director.spriteDirect(true)\n  }\n\n  /**\n   * 注册事件\n   */\n  registerEvent() {\n    // 使用=>使this指向Main类\n    this.canvas.addEventListener('touchstart', e => {\n      // 屏蔽事件冒泡\n      e.preventDefault()\n      // 如果游戏是结束状态，则重新开始\n      if (this.dataStore.isGameOver) {\n        // 重新初始化\n        this.dataStore.isGameOver = false\n        this.reload()\n      }\n    })\n  }\n}","// require('./src/base/weapp-adapter.js')\nconst Matter = require('./src/base/matter.js')\nimport { App } from './App.js'\n\n// 同时兼容H5模式和微信小游戏模式\nconst canvas = typeof wx == 'undefined' ? document.getElementById('app') : wx.createCanvas()\n// H5网页游戏模式\nif (typeof wx == 'undefined') {\n  canvas.width = 375\n  canvas.height = 667\n}\n// 微信小游戏模式\nelse {\n  window.Image = () => wx.createImage()\n  window.Audio = () => wx.createInnerAudioContext()\n}\n// 初始化物理引擎\nconst engine = Matter.Engine.create({\n  enableSleeping: true\n})\nconst render = Matter.Render.create({\n  canvas: canvas,\n  engine: engine,\n  options: {\n    width: canvas.width,\n    height: canvas.height,\n    background: './res/background.png', // transparent\n    wireframes: false,\n    showAngleIndicator: false\n  }\n})\nMatter.Engine.run(engine)\n// Matter.Render.run(render)\n\n// 初始化游戏\nconst physics = { Matter, engine, canvas, render }\nnew App(canvas, physics)\n\n\n\n\n\n\n\n\n\n// const A = {\n//   x: 0,\n//   y: 0\n// }\n\n// const B = {\n//   x: 150,\n//   y: 0\n// }\n\n// var context = canvas.getContext('2d')\n// context.fillStyle = 'red'\n\n// var engine = Matter.Engine.create();\n\n// var boxA = Matter.Bodies.rectangle(A.x, A.y, 30, 30);\n// var boxB = Matter.Bodies.rectangle(B.x, B.y, 60, 60);\n// var ground = Matter.Bodies.rectangle(0, canvas.height - 60, canvas.width, 10, { isStatic: true });\n\n// Matter.World.add(engine.world, [boxA, boxB, ground]);\n// setInterval(function () {\n//   context.clearRect(0, 0, canvas.width, canvas.height)\n//   Matter.Events.trigger(engine, 'tick', { timestamp: engine.timing.timestamp })\n//   Matter.Engine.update(engine, engine.timing.delta)\n//   Matter.Events.trigger(engine, 'afterTick', { timestamp: engine.timing.timestamp })\n//   console.info(boxA)\n//   context.fillRect(boxA.position.x, boxA.position.y, 30, 30)\n//   context.fillRect(boxB.position.x, boxB.position.y, 60, 60)\n//   context.fillRect(0, canvas.height - 60, canvas.width, 10)\n//   // console.log('boxA', boxA.position);\n//   // console.log('boxB', boxB.position);\n// }, 50)"]}